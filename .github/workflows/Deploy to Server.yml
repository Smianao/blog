name: docs

on:
  # 每当 push 到 main 分支时触发部署
  push:
    branches: [master]
  # 手动触发部署
  workflow_dispatch:

jobs:
  docs:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          # “最近更新时间” 等 git 日志相关信息，需要拉取全部提交记录
          fetch-depth: 0

      - name: 设置 Node.js
        uses: actions/setup-node@v4
        with:
          # 选择要使用的 node 版本
          node-version: 22 # VuePress 推荐 Node.js 16.x 或以上
          # 缓存 Node.js 依赖
          cache: npm

      - name: 安装依赖
        run: npm ci # 使用 npm 的安装方式，`ci` 确保依赖版本固定

      # 运行构建脚本
      - name: 构建 VuePress 站点
        run: npm run docs:build # 替换为你的构建命令

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with: 
          path: src/.vuepress/dist
        
          # Step 5: 清空服务器文件夹并发布到服务器
      - name: Deploy to server
        env:
          SERVER_HOST: ${{ secrets.SERVER_HOST }} # 您的服务器地址，从 GitHub Secrets 传入
          SERVER_USER: ${{ secrets.SERVER_USER }} # 登录服务器的用户名，从 GitHub Secrets 传入
          SERVER_KEY: ${{ secrets.SERVER_KEY }}   # 私钥，用于通过 SSH 登录服务器，从 GitHub Secrets 传入
          DEPLOY_PATH: ${{ secrets.DEPLOY_PATH }} # 在服务器上部署的路径，从 GitHub Secrets 传入
        run: |
          echo "${SERVER_KEY}" > server_key.pem
          chmod 600 server_key.pem
          # Step 5.1 使用 SSH 清空远程文件夹
          ssh -i server_key.pem ${SERVER_USER}@${SERVER_HOST} "rm -rf ${DEPLOY_PATH}/*"
          # Step 5.2 上传新的文件
          scp -i server_key.pem -r ./src/.vuepress/dist/* ${SERVER_USER}@${SERVER_HOST}:${DEPLOY_PATH}
          rm -f server_key.pem
